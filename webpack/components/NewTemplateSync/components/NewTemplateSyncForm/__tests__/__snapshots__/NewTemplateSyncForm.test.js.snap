// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NewTemplateSyncForm should render for export settings 1`] = `
<ForemanForm
  initialValues={
    Object {
      "export": Object {
        "filter": "",
        "negate": false,
        "repo": "https://github.com/theforeman/community-templates.git",
      },
      "import": Object {
        "associate": "new",
        "force": false,
      },
    }
  }
  onCancel={[Function]}
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "export",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "fields": Object {
        "export": ObjectSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [
            "repo",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "fields": Object {
            "repo": StringSchema {
              "_blacklist": RefSet {
                "list": Array [],
                "refs": Array [],
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "repo-format": false,
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Array [],
                "refs": Array [],
              },
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
>
  <SyncTypeRadios
    controlLabel="Action type"
    disabled={false}
    name="syncType"
    radios={
      Array [
        Object {
          "checked": true,
          "label": "Export",
          "onChange": [Function],
          "permission": "export",
          "value": "export",
        },
      ]
    }
  />
  <SyncSettingsFields
    exportSettings={
      Array [
        Object {
          "description": "Import or export names matching this regex (case-insensitive; snippets are not filtered)",
          "id": 47,
          "name": "filter",
          "settingsType": "string",
          "value": "",
        },
        Object {
          "description": "Negate the filter for import/export",
          "id": 48,
          "name": "negate",
          "settingsType": "bool",
          "value": false,
        },
        Object {
          "description": "Target path to import and export. Different protocols can be used, for example /tmp/dir, git://example.com, https://example.com, ssh://example.com. When exporting to /tmp, note that production deployments may be configured to use private tmp.",
          "id": 49,
          "name": "repo",
          "settingsType": "string",
          "value": "https://github.com/theforeman/community-templates.git",
        },
      ]
    }
    formProps={Object {}}
    importSettings={
      Array [
        Object {
          "description": "Associate templates to OS, organization and location",
          "id": 45,
          "name": "associate",
          "selection": Array [
            Object {
              "label": "New",
              "value": "new",
            },
            Object {
              "label": "Never",
              "value": "never",
            },
            Object {
              "label": "Always",
              "value": "always",
            },
          ],
          "settingsType": "string",
          "value": "new",
        },
        Object {
          "description": "Should importing overwrite locked templates?",
          "id": 46,
          "name": "force",
          "settingsType": "bool",
          "value": false,
        },
      ]
    }
    resetField={[Function]}
    syncType="export"
  />
</ForemanForm>
`;

exports[`NewTemplateSyncForm should render when for import settings 1`] = `
<ForemanForm
  initialValues={
    Object {
      "export": Object {
        "filter": "",
        "negate": false,
        "repo": "https://github.com/theforeman/community-templates.git",
      },
      "import": Object {
        "associate": "new",
        "force": false,
      },
    }
  }
  onCancel={[Function]}
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "import",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "fields": Object {
        "import": ObjectSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "fields": Object {},
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
>
  <SyncTypeRadios
    controlLabel="Action type"
    disabled={false}
    name="syncType"
    radios={
      Array [
        Object {
          "checked": true,
          "label": "Import",
          "onChange": [Function],
          "permission": "import",
          "value": "import",
        },
        Object {
          "checked": false,
          "label": "Export",
          "onChange": [Function],
          "permission": "export",
          "value": "export",
        },
      ]
    }
  />
  <SyncSettingsFields
    exportSettings={
      Array [
        Object {
          "description": "Import or export names matching this regex (case-insensitive; snippets are not filtered)",
          "id": 47,
          "name": "filter",
          "settingsType": "string",
          "value": "",
        },
        Object {
          "description": "Negate the filter for import/export",
          "id": 48,
          "name": "negate",
          "settingsType": "bool",
          "value": false,
        },
        Object {
          "description": "Target path to import and export. Different protocols can be used, for example /tmp/dir, git://example.com, https://example.com, ssh://example.com. When exporting to /tmp, note that production deployments may be configured to use private tmp.",
          "id": 49,
          "name": "repo",
          "settingsType": "string",
          "value": "https://github.com/theforeman/community-templates.git",
        },
      ]
    }
    formProps={Object {}}
    importSettings={
      Array [
        Object {
          "description": "Associate templates to OS, organization and location",
          "id": 45,
          "name": "associate",
          "selection": Array [
            Object {
              "label": "New",
              "value": "new",
            },
            Object {
              "label": "Never",
              "value": "never",
            },
            Object {
              "label": "Always",
              "value": "always",
            },
          ],
          "settingsType": "string",
          "value": "new",
        },
        Object {
          "description": "Should importing overwrite locked templates?",
          "id": 46,
          "name": "force",
          "settingsType": "bool",
          "value": false,
        },
      ]
    }
    resetField={[Function]}
    syncType="import"
  />
</ForemanForm>
`;
